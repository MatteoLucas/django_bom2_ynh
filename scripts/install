#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

admin_email=$(ynh_user_get_info --username="$admin" --key=mail)

#=================================================
# COPY SOURCE FILES
#=================================================
cp -r ../bom "$data_dir/"
mkdir -p "/var/log/$app"

#=================================================
# SETTINGS
#=================================================
ynh_script_progression --message="Storing installation settings..."

log_file="$data_dir/django.log"
ynh_app_setting_set --app=$app --key=log_file --value="$log_file"

# Set default/fake keys
ynh_app_setting_set --app=$app --key=sendgrid_api_key --value="fake-sendgrid-key"
ynh_app_setting_set --app=$app --key=fixer_api_key --value="$fixer_api_key"
ynh_app_setting_set --app=$app --key=sso_main_domain --value="$sso_main_domain"

export SSO_MAIN_DOMAIN="$sso_main_domain"

# Debug / log
ynh_app_setting_set --app=$app --key=debug_enabled --value="$debug_enabled"
ynh_app_setting_set --app=$app --key=log_level --value="$log_level"
ynh_app_setting_set --app=$app --key=default_from_email --value="$default_from_email"
ynh_app_setting_set --app=$app --key=admin_email --value="$admin_email"

# Redis
redis_db=$(ynh_redis_get_free_db)
ynh_app_setting_set --app=$app --key=redis_db --value="$redis_db"

# Ajout ADMIN_USERNAME
ynh_app_setting_set --app=$app --key=ADMIN_USERNAME --value="$admin"

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..."
mkdir -p "$install_dir/media" "$install_dir/static"

#=================================================
# SETUP LOGGING
#=================================================
ynh_script_progression --message="Setup logging..."
myynh_setup_log_file
ynh_config_add_logrotate "$log_file"

#=================================================
# PYTHON VIRTUALENV
#=================================================
ynh_script_progression --message="Create and setup Python virtualenv..." --weight=45
cp ../conf/requirements.txt "$data_dir/requirements.txt"
myynh_setup_python_venv

#=================================================
# COPY CONFIG FILES
#=================================================
ynh_script_progression --message="Create $app configuration files..."

ynh_config_add --template="gunicorn.conf.py" --destination="$data_dir/gunicorn.conf.py"
ynh_config_add --template="manage.py" --destination="$data_dir/manage.py"
chmod +x "$data_dir/manage.py"
ynh_config_add --template="settings.py" --destination="$data_dir/settings.py"
ynh_config_add --template="setup_user.py" --destination="$data_dir/setup_user.py"
ynh_config_add --template="urls.py" --destination="$data_dir/urls.py"
ynh_config_add --template="wsgi.py" --destination="$data_dir/wsgi.py"

#=================================================
# MIGRATE / COLLECTSTATIC / CREATEADMIN
#=================================================
ynh_script_progression --message="migrate/collectstatic/createadmin..." --weight=10
cd "$data_dir" || exit

# Génére le fichier secret.txt
secret_file="$data_dir/secret.txt"
openssl rand -hex 64 > "$secret_file"
chown $app:$app "$secret_file"
chmod 400 "$secret_file"

# Environnement Django
export DJANGO_LOGFILE_DIR="$data_dir"
export SENDGRID_API_KEY="fake-sendgrid-key"
export FIXER_ACCESS_KEY="$fixer_api_key"
export ADMIN_USERNAME="$admin"

db_user=$(ynh_app_setting_get --app="$app" --key="db_user")
db_pwd=$(ynh_app_setting_get --app="$app" --key="db_pwd")
db_name=$(ynh_app_setting_get --app="$app" --key="db_name")
database_url="postgres://${db_user}:${db_pwd}@localhost/${db_name}"


export DATABASE_URL="$database_url"
ynh_app_setting_set --app=$app --key=DATABASE_URL --value="$database_url"

"$data_dir/.venv/bin/python" manage.py migrate

# Collect static files
ynh_script_progression --message="Collecting static files..." --weight=5
"$data_dir/.venv/bin/python" manage.py collectstatic --noinput

# Create admin user (no password, for SSO only)
"$data_dir/.venv/bin/python" manage.py create_superuser --username="$admin" --email="$admin_email"

# Copie les fichiers statiques vers nginx
mkdir -p /var/www/$app/static
cp -r "$data_dir/static/." "/var/www/$app/static/"
chown -R www-data: /var/www/$app/static

"$data_dir/.venv/bin/python" manage.py check --deploy || true

#=================================================
# YUNOHOST INTEGRATION
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."
deactivate
yunohost service add --description $app $app

#=================================================
# FILE PERMISSIONS
#=================================================
ynh_script_progression --message="Set file permissions..."
myynh_fix_file_permissions

#=================================================
# SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Configuring systemd service '$app'..." --weight=5
ynh_config_add_systemd

# Remplacement dynamique dans le template systemd
systemd_file="/etc/systemd/system/$app.service"
sed -i "s|__APP__|$app|g" "$systemd_file"
sed -i "s|__DATA_DIR__|$data_dir|g" "$systemd_file"
sed -i "s|__DB_NAME__|$db_name|g" "$systemd_file"
sed -i "s|__DB_USER__|$db_user|g" "$systemd_file"
sed -i "s|__DB_PWD__|$db_pwd|g" "$systemd_file"
sed -i "s|__FIXER_API_KEY__|$fixer_api_key|g" "$systemd_file"
sed -i "s|__SSO_MAIN_DOMAIN__|$sso_main_domain|g" "$systemd_file"

ynh_systemctl --service=$app --action="start" --log_path="$log_file"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring nginx web server..."
ynh_config_add_nginx --template="nginx.conf" --domain="$domain" --port="$port"



#=================================================
ynh_script_progression --message="Configuring SSO cookie domain..."

SSO_CONF="/etc/ssowat/conf.json.persistent"
COOKIE_DOMAIN=".$sso_main_domain"

# Créer le fichier s’il est vide ou inexistant
if [ ! -s "$SSO_CONF" ]; then
    echo "{ \"cookie_domain\": \"$COOKIE_DOMAIN\" }" > "$SSO_CONF"
else
    # Ajouter ou modifier proprement l’entrée "cookie_domain"
    if jq ". + {\"cookie_domain\": \"$COOKIE_DOMAIN\"}" "$SSO_CONF" > "${SSO_CONF}.tmp"; then
        mv "${SSO_CONF}.tmp" "$SSO_CONF"
    else
        echo "Warning: failed to update cookie_domain in $SSO_CONF"
    fi
fi

# Reload Nginx pour appliquer les headers SSO
systemctl reload nginx
#=================================================
# DONE
#=================================================
systemctl daemon-reexec
systemctl daemon-reload
systemctl restart "$app"

ynh_script_progression --message="Installation of $app completed" --last
